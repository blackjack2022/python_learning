'''

在 Python
语言中，元组也是多个元素按照一定顺序构成的序列。元组和列表的不同之处在于，元组是不可变类型，
这就意味着元组类型的变量一旦定义，其中的元素不能再添加或删除，而且元素的值也不能修改。
如果试图修改元组中的元素，将引发TypeError错误，导致程序崩溃。
定义元组通常使用形如(x, y, z)的字面量语法，元组类型支持的运算符跟列表是一样的，我们可以看看下面的代码。

'''
t0 = (1)
print(type(t0))
t1 = (1,)
print(type(t1))
t2 = (1, 2, 3, 4)
print(t2[::2])

'''
打包和解包操作
当我们把多个用逗号分隔的值赋给一个变量时，多个值会打包成一个元组类型；
当我们把一个元组赋值给多个变量时，元组会解包成多个值然后分别赋给对应的变量，如下面的代码所示。
'''
v1 = 1, 2, 3
print(type(v1))
v2, v3, v4 = v1
print(v2, v3, v4)

'''
在解包时，如果解包出来的元素个数和变量个数不对应，会引发ValueError异常，错误信息为：too many values to unpack（解包的值太多）或not enough values to unpack（解包的值不足）。

a = 1, 10, 100, 1000
# i, j, k = a             # ValueError: too many values to unpack (expected 3)
# i, j, k, l, m, n = a    # ValueError: not enough values to unpack (expected 6, got 4)
有一种解决变量个数少于元素的个数方法，就是使用星号表达式。通过星号表达式，我们可以让一个变量接收多个值，代码如下所示。需要注意两点：首先，用星号表达式修饰的变量会变成一个列表，列表中有0个或多个元素；其次，在解包语法中，星号表达式只能出现一次。
'''
a = 1, 10, 100, 1000
i, j, *k = a
print(i, j, k)  # 1 10 [100, 1000]

'''
需要说明一点，解包语法对所有的序列都成立，这就意味着我们之前讲的列表、range函数构造的范围序列甚至字符串都可以使用解包语法。大家可以尝试运行下面的代码，看看会出现怎样的结果。

'''
a, b, *c = range(1, 10)
print(a, b, c)
a, b, c = [1, 10, 100]
print(a, b, c)
a, *b, c = 'hello'
print(a, b, c)

'''
交换变量的值
'''
a = 1
b = 2
c = 3
a, b, c = b, c, a
print(a, b, c)

'''
Python 中的元组和列表类型是可以相互转换的
'''
t4 = (2, 3, 4)
print(list(t4))
l4 = ['2', '3']
print(tuple(l4))
